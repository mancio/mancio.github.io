{"version":3,"sources":["fart/FartLogic.js","fart/Farts.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/regenerator-runtime/runtime.js"],"names":["farts","Toot","Ripper","Plop","Squit","Raspberry","Squat","Tuppence","Liftoff","Trumpet","Fizzler","Windy","Eine","Fartception","Fartpoint1","valuesOfFarts","Object","values","namesOfFarts","keys","playFart","index","Audio","play","then","r","console","log","getFartNameFromIndex","catch","getRandomIndex","Math","floor","random","length","playArmageddonFart","a","timer","ms","Promise","res","setTimeout","i","playSingleFart","name","indexOf","getIndexFromFartName","Farts","backButton","getMenuItemByTag","className","href","rel","target","onClick","map","window","alert","ButtonTemplate","id","width","height","svgColor","textColor","textField","icon","iconColor","tag","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","runtime","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","iter","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function"],"mappings":"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","file":"static/js/17.14b04359.chunk.js","sourcesContent":["// inspired by http://jsfart.com\n\nconst farts = {\n\tToot : 'fart1',\n\tRipper : 'fart2',\n\tPlop : 'fart3',\n\tSquit : 'fart4',\n\tRaspberry : 'fart5',\n\tSquat : 'fart6',\n\tTuppence : 'fart7',\n\tLiftoff : 'fart8',\n\tTrumpet : 'fart9',\n\tFizzler : 'fart10',\n\tWindy : 'fart11',\n\tEine : 'fart12',\n\tFartception: 'fart13',\n\tFartpoint1: 'fart14'\n};\n\nconst valuesOfFarts = Object.values(farts);\n\nconst namesOfFarts = Object.keys(farts);\n\nexport const getNamesOfFarts = function (){\n\treturn namesOfFarts;\n}\n\nconst getFartNameFromIndex = function (index){\n\treturn namesOfFarts[index];\n}\n\nconst getIndexFromFartName = function (name){\n\treturn namesOfFarts.indexOf(name);\n}\n\nconst playFart = function (index){\n\tconst audio = new Audio('https://raw.githubusercontent.com/74656c/fart.js/master/farts/'+ valuesOfFarts[index] + '.mp3');\n\taudio.play().then(r => console.log(\"I'm farting!: \" + getFartNameFromIndex(index)))\n\t\t.catch(r => console.log(r));\n}\n\nconst getRandomIndex = function (){\n\treturn Math.floor(Math.random() * valuesOfFarts.length);\n}\n\nexport const playRandomFart = function (){\n\tplayFart(getRandomIndex());\n}\n\nexport const playArmageddonFart = async function () {\n\tconst timer = ms => new Promise(res => setTimeout(res, ms))\n\tfor (let i = 0; i <= 50; i++) {\n\t\tplayFart(getRandomIndex());\n\t\tawait timer(500);\n\t}\n}\n\nexport const playSingleFart = function (name){\n\tconst index = getIndexFromFartName(name);\n\tplayFart(index);\n}\n\nexport const askToStop = function (){\n\twindow.alert('ehehh you wish.....');\n}","import './Farts.css';\nimport ButtonTemplate from \"../menu/ButtonTemplate\";\nimport React from \"react\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport {askToStop, getNamesOfFarts, playArmageddonFart, playRandomFart, playSingleFart} from \"./FartLogic\";\n\nexport default function Farts(){\n\n    const backButton = getMenuItemByTag('back');\n\n\n    return(\n        <div className='fart-page'>\n            <h1 className='fart-title'>🤣 🤣 Farting page 🤣 🤣</h1>\n            <h3 className='fart-desc'>\n                If you ever wonder if a JS library to make your page fart exist....\n                well YES!\n            </h3>\n            <p>\n                Unfortunately the famous jsFart library is not maintained anymore so I decided to write my own code in\n                much more simple \"React Style\" way. <a href='http://jsfart.com' rel=\"noreferrer\" target=\"_blank\">CLicK HeRe!</a> to visit\n                the old library or visit my <a href='https://github.com/mancio/MancioTechWeb'>GitHub</a> for the new implementation.\n            </p>\n            <div className='fart-control-panel'>\n                <button onClick={() => playRandomFart()} className='fart-button'>Random Fart</button>\n                {getNamesOfFarts().map(name => {\n                    return(\n                        <button onClick={() => playSingleFart(name)} className='fart-button'>{name}</button>\n                    )\n                })}\n                <button onClick={() => playArmageddonFart()} className='fart-button'>Armageddon</button>\n                <button onClick={() => askToStop()} className='fart-button'>Stop farting</button>\n            </div>\n            <ButtonTemplate\n                key={backButton.id}\n                id={backButton.id}\n                width={backButton.width}\n                height={backButton.height}\n                svgColor={backButton.svgColor}\n                textColor={backButton.textColor}\n                textField={backButton.textField}\n                icon={backButton.icon}\n                iconColor={backButton.iconColor}\n                tag='menu'\n            />\n        </div>\n    )\n}","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n"],"sourceRoot":""}