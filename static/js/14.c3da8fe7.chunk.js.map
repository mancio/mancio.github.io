{"version":3,"sources":["weather/WeatherHandler.js","weather/City.js","weather/Map.js","weather/Weather.js","passwords/Passwords.js"],"names":["cities","getTodayWeather","city","fetch","API_key","then","res","json","result","console","log","catch","er","getHumanTime","timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","City","props","useState","data","setData","loaded","setLoaded","cityName","name","useEffect","a","fetchData","r","id","main","Card","className","Content","Header","temp","sys","sunrise","sunset","weather","description","Map","url","width","height","display","Weather","backButton","getMenuItemByTag","map","currentId","ButtonTemplate","svgColor","textColor","textField","icon","iconColor","tag","geoApiKey","serviceForm","templateForm","userForm","rapidKey","unogRapidHost","strAvalHost","theMovieDBKey"],"mappings":"4RAEaA,EAAS,CAAC,UAAW,WAAY,WAIjCC,EAAkB,SAAUC,GACrC,OAAOC,MAAM,qDAAuDD,EAAO,UAAYE,IAA1E,iBACRC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEF,OADAC,QAAQC,IAAIF,GACLA,KAEVG,OAAM,SAAAC,GAGH,OAFAH,QAAQC,IAAI,2BACZD,QAAQC,IAAIE,GACL,gBAQNC,EAAe,SAAUC,GAIlC,IAAMC,EAAO,IAAIC,KAAiB,IAAZF,GAEhBG,EAAQF,EAAKG,WAEbC,EAAU,IAAMJ,EAAKK,aAErBC,EAAU,IAAMN,EAAKO,aAG3B,MAAO,MAAQL,EAAQ,WAAaE,EAAQI,QAAQ,GAAK,WAAaF,EAAQE,QAAQ,I,yBC/B3E,SAASC,EAAKC,GAEzB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAWN,EAAMO,KAkBvB,OAhBAC,qBAAU,WAAM,4CAEZ,4BAAAC,EAAA,yDACQL,EADR,gCAE0B5B,EAAgB8B,GAF1C,OAEczB,EAFd,OAGQsB,EAAQtB,GAHhB,4CAFY,uBAAC,WAAD,gCASZ6B,GAAY9B,MAAK,SAAA+B,GACbN,GAAU,QAGhB,CAACD,EAAOE,IAIN,qBAAKM,GAAIZ,EAAMY,GAAf,SAC0B,oBAAbV,EAAKW,KACV,cAACC,EAAA,EAAD,CAAMC,UAAU,eAAhB,SACI,eAACD,EAAA,EAAKE,QAAN,WACI,cAACF,EAAA,EAAKG,OAAN,CAAaF,UAAU,iBAAvB,SAAyCb,EAAKK,OAC9C,8CAAiBL,EAAKW,KAAKK,KAAO,QAClC,0CAAa9B,EAAac,EAAKiB,IAAIC,YACnC,yCAAYhC,EAAac,EAAKiB,IAAIE,WAClC,8CAAiBnB,EAAKoB,QAAQ,GAAGC,oBAIzC,oCAAM,iDAAN,S,mCCrCD,SAASC,IACpB,OACI,8BACI,cAAC,IAAD,CACIT,UAAU,cACVU,IFYL,kGEXKC,MAAM,QACNC,OAAO,QACPC,QAAQ,cCJT,SAASC,IAEpB,IAAMC,EAAaC,YAAiB,QAChCnB,EAAK,EAET,OACI,gCACI,oBAAIG,UAAU,gBAAd,kDACA,qBAAKA,UAAU,mBAAf,SACKxC,EAAOyD,KAAI,SAAAvD,GACRO,QAAQC,IAAIR,GACZ,IAAMwD,EAAYrB,IAClB,OACI,cAAC,EAAD,CACIL,KAAM9B,EACNmC,GAAIqB,GACCA,QAKrB,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,CAEItB,GAAIkB,EAAWlB,GACfc,MAAOI,EAAWJ,MAClBC,OAAQG,EAAWH,OACnBQ,SAAUL,EAAWK,SACrBC,UAAWN,EAAWM,UACtBC,UAAWP,EAAWO,UACtBC,KAAMR,EAAWQ,KACjBC,UAAWT,EAAWS,UACtBC,IAAI,QATCV,EAAWlB,S,gCC/BhC,kTACO,IAAM6B,EAAY,mCAGZC,EAAc,kBACdC,EAAe,mBACfC,EAAW,6BAGXC,EAAW,qDAGXC,EAAgB,yBAGhBC,EAAc,wCAGdC,EAAgB,mCAGhBrE,EAAU","file":"static/js/14.c3da8fe7.chunk.js","sourcesContent":["import {API_key} from \"../passwords/Passwords\";\n\nexport const cities = ['Bologna', 'Cracovia', 'Canazei'];\n\nconst unit = 'metric';\n\nexport const getTodayWeather = function (city){\n    return fetch('https://api.openweathermap.org/data/2.5/weather?q=' + city + '&appid=' + API_key + '&units=' + unit)\n        .then(res => res.json())\n        .then(result => {\n            console.log(result);\n            return result;\n        })\n        .catch(er =>{\n            console.log(\"unable to check weather\");\n            console.log(er);\n            return \"undefined\";\n        });\n}\n\nexport const getWeatherMapUrl = function (){\n    return 'https://openweathermap.org/weathermap?basemap=map&cities=false&layer=radar&lat=52&lon=20&zoom=5';\n}\n\nexport const getHumanTime = function (timestamp){\n\n    // Create a new JavaScript Date object based on the timestamp\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n    const date = new Date(timestamp * 1000);\n    // Hours part from the timestamp\n    const hours = date.getHours();\n    // Minutes part from the timestamp\n    const minutes = \"0\" + date.getMinutes();\n    // Seconds part from the timestamp\n    const seconds = \"0\" + date.getSeconds();\n\n    // Will display time in 10:30:23 format\n    return 'h: ' + hours + ' : min: ' + minutes.substr(-2) + ' : sec: ' + seconds.substr(-2);\n}\n\n","import {useEffect, useState} from \"react\";\nimport {getHumanTime, getTodayWeather} from \"./WeatherHandler\";\nimport { Card } from 'semantic-ui-react'\nimport './City.css';\nimport React from \"react\";\n\nexport default function City(props){\n\n    const [data, setData] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const cityName = props.name;\n\n    useEffect(() => {\n\n        async function fetchData() {\n            if(!loaded){\n                const res = await getTodayWeather(cityName);\n                setData(res);\n            }\n        }\n\n        fetchData().then(r => {\n            setLoaded(true);\n        });\n\n    },[loaded,cityName])\n\n\n    return(\n        <div id={props.id}>\n            {(typeof data.main != 'undefined') ? (\n                <Card className='weather-card' >\n                    <Card.Content>\n                        <Card.Header className=\"weather-header\">{data.name}</Card.Header>\n                        <p>Temperature: {data.main.temp + ' C'}</p>\n                        <p>Sunrise: {getHumanTime(data.sys.sunrise)}</p>\n                        <p>Sunset: {getHumanTime(data.sys.sunset)}</p>\n                        <p>Description: {data.weather[0].description}</p>\n                    </Card.Content>\n                </Card>\n            ): (\n                <div> <p> Data not found </p> </div>\n            )}\n        </div>\n    )\n}\n","import Iframe from \"react-iframe\";\nimport {getWeatherMapUrl} from \"./WeatherHandler\";\nimport './Map.css';\n\nexport default function Map(){\n    return(\n        <div>\n            <Iframe\n                className='weather-map'\n                url={getWeatherMapUrl()}\n                width=\"700px\"\n                height=\"450px\"\n                display='initial'\n            />\n        </div>\n    )\n}","import './Weather.css';\nimport City from \"./City\";\nimport {cities} from \"./WeatherHandler\";\nimport ButtonTemplate from \"../menu/ButtonTemplate\";\nimport React from \"react\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport Map from \"./Map\";\n\nexport default function Weather(){\n\n    const backButton = getMenuItemByTag('back');\n    let id = 0;\n\n    return(\n        <div>\n            <h1 className='weather-title'>How is going in my favourite places?</h1>\n            <div className='weather-card-box'>\n                {cities.map(city => {\n                    console.log(city)\n                    const currentId = id++;\n                    return(\n                        <City\n                            name={city}\n                            id={currentId}\n                            key={currentId}\n                        />\n                    )\n                })}\n            </div>\n            <Map/>\n            <ButtonTemplate\n                key={backButton.id}\n                id={backButton.id}\n                width={backButton.width}\n                height={backButton.height}\n                svgColor={backButton.svgColor}\n                textColor={backButton.textColor}\n                textField={backButton.textField}\n                icon={backButton.icon}\n                iconColor={backButton.iconColor}\n                tag='menu'\n            />\n        </div>\n    )\n}","// index page get time\r\nexport const geoApiKey = \"67b6d75b5174440288183e98d31300b6\";\r\n\r\n// contact me form\r\nexport const serviceForm = \"service_rijuz4b\";\r\nexport const templateForm = \"template_glf4e4e\";\r\nexport const userForm = \"user_5cffDNndYp5Lv2j1dOnPe\";\r\n\r\n// rapid key\r\nexport const rapidKey = \"d1c59cf873msh4b26748b3661acbp111084jsn2a3596fb90a3\";\r\n\r\n// netflix\r\nexport const unogRapidHost = \"unogsng.p.rapidapi.com\";\r\n\r\n// hbo and prime\r\nexport const strAvalHost = \"streaming-availability.p.rapidapi.com\";\r\n\r\n// the movie db\r\nexport const theMovieDBKey = \"16b6cf28c0d65bd12befe3ce18853769\";\r\n\r\n// weather\r\nexport const API_key = \"9a072cca30ac7c3ac75362d8edfd3199\";"],"sourceRoot":""}