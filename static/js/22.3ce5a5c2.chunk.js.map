{"version":3,"sources":["series/Platform.js","passwords/Passwords.js","logic/ErrorsHandler.js","series/SeriesHandler.js"],"names":["Platform","back","getMenuItemByTag","menu","getMoviePlatformMenu","className","map","item","id","width","height","svgColor","textColor","textField","icon","iconColor","tag","geoApiKey","serviceForm","templateForm","userForm","rapidKey","unogRapidHost","strAvalHost","theMovieDBKey","API_key","handleError","error","response","status","number","window","alert","platformButtons","idPlusPlus","netflix_options","method","url","params","start_year","orderby","audiosubtitle_andor","start_rating","limit","subtitle","audio","offset","end_year","headers","others_options","country","service","type","page","output_language","language","movie_options","JSON","parse","stringify","series_options","movies","series","clearMediaArrays","length","searchNetflixMedia","axios","request","then","r","data","results","filter","m","vtype","push","catch","console","options","array","res","s","er","get","log","searchOtherMedia","platform","getRandomNumber","toString","all","spread","searchMovieDB","region","movie_url","series_url","paraMatch","media","title","year","img","desc","synopsis","rating","imdbrating","name","first_air_date","release_date","backdrop_path","overview","vote_average","tmdbID","originalTitle","Object","values","backdropURLs","imdbRating"],"mappings":"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","file":"static/js/22.3ce5a5c2.chunk.js","sourcesContent":["import ButtonTemplate from \"../menu/ButtonTemplate\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport {getMoviePlatformMenu} from \"./SeriesHandler\";\nimport './Platform.css';\nimport React from \"react\";\n\nexport default function Platform(){\n\n    const back = getMenuItemByTag('back');\n    const menu = getMoviePlatformMenu();\n    return(\n        <div>\n            <h1 className='platform-title'>Select your favourite movie platform and see what's new</h1>\n            <div className='note-info-platform'>\n                <p>\n                    NOTE: Prime and HBO research is not so good... I'm still looking\n                    for a better service.\n                </p>\n            </div>\n            <div>\n                {menu.map(item => {\n                    return(\n                        <ButtonTemplate\n                            key={item.id}\n                            id={item.id}\n                            width={item.width}\n                            height={item.height}\n                            svgColor={item.svgColor}\n                            textColor={item.textColor}\n                            textField={item.textField}\n                            icon={item.icon}\n                            iconColor={item.iconColor}\n                            tag={item.tag}\n                        />\n                    )\n                })}\n            </div>\n            <ButtonTemplate\n                key={back.id}\n                id={back.id}\n                width={back.width}\n                height={back.height}\n                svgColor={back.svgColor}\n                textColor={back.textColor}\n                textField={back.textField}\n                icon={back.icon}\n                iconColor={back.iconColor}\n                tag='menu'\n            />\n        </div>\n    )\n}","// index page get time\r\nexport const geoApiKey = \"67b6d75b5174440288183e98d31300b6\";\r\n\r\n// contact me form\r\nexport const serviceForm = \"service_rijuz4b\";\r\nexport const templateForm = \"template_glf4e4e\";\r\nexport const userForm = \"user_5cffDNndYp5Lv2j1dOnPe\";\r\n\r\n// rapid key\r\nexport const rapidKey = \"d1c59cf873msh4b26748b3661acbp111084jsn2a3596fb90a3\";\r\n\r\n// netflix\r\nexport const unogRapidHost = \"unogsng.p.rapidapi.com\";\r\n\r\n// hbo and prime\r\nexport const strAvalHost = \"streaming-availability.p.rapidapi.com\";\r\n\r\n// the movie db\r\nexport const theMovieDBKey = \"16b6cf28c0d65bd12befe3ce18853769\";\r\n\r\n// weather\r\nexport const API_key = \"9a072cca30ac7c3ac75362d8edfd3199\";","export const handleError = function (error){\n    if(error.response.status){\n        const number = error.response.status;\n        if(number === 429) {\n            window.alert(\"Too many requests, please try later\");\n        }\n        if(number === 400){\n            window.alert(\"Not working\");\n        }\n    }else {\n        window.alert(\"Something got wrong\");\n    }\n}","import {getRandomNumber, idPlusPlus} from \"../logic/Counter\";\nimport axios from \"axios\";\nimport {unogRapidHost, rapidKey, strAvalHost, theMovieDBKey} from \"../passwords/Passwords\";\nimport {handleError} from \"../logic/ErrorsHandler\";\n\nconst textColor = '#ffffff';\n\nconst platformButtons = [\n    {\n        id: idPlusPlus(),\n        width:250,\n        height:55,\n        svgColor:'#bd1414',\n        textColor: textColor,\n        textField:'NETFLIX PL',\n        icon: 'TV',\n        iconColor: '#bd1414',\n        tag: 'netflix'\n    },\n    {\n        id: idPlusPlus(),\n        width:250,\n        height:55,\n        svgColor:'#1224cd',\n        textColor: textColor,\n        textField:'HBO US',\n        icon: 'TV',\n        iconColor: '#1224cd',\n        tag: 'hbo'\n    },\n    {\n        id: idPlusPlus(),\n        width:250,\n        height:55,\n        svgColor:'#ffa200',\n        textColor: textColor,\n        textField:'PRIME PL',\n        icon: 'TV',\n        iconColor: '#ffa200',\n        tag: 'prime'\n    },\n    {\n        id: idPlusPlus(),\n        width:250,\n        height:55,\n        svgColor:'#1773ce',\n        textColor: textColor,\n        textField:'THE MOVIE DB',\n        icon: 'TV',\n        iconColor: '#1773ce',\n        tag: 'themoviedb'\n    }\n]\n\nexport const getMoviePlatformMenu = function (){\n    return platformButtons;\n}\n\nconst netflix_options = {\n    method: 'GET',\n    url: 'https://unogsng.p.rapidapi.com/search',\n    params: {\n        start_year: '2000',\n        orderby: 'dateDesc',\n        audiosubtitle_andor: 'and',\n        start_rating: '7',\n        limit: '100',\n        subtitle: 'english',\n        audio: 'english',\n        offset: '0',\n        end_year: '2021'\n    },\n    headers: {\n        'x-rapidapi-host': unogRapidHost,\n        'x-rapidapi-key': rapidKey\n    }\n};\n\nconst others_options = {\n    method: 'GET',\n    url: 'https://streaming-availability.p.rapidapi.com/search/basic',\n    params: {\n        country: 'pl',\n        service: '',\n        type: '',\n        page: '1',\n        output_language: 'en',\n        language: 'en'\n    },\n    headers: {\n        'x-rapidapi-host': strAvalHost,\n        'x-rapidapi-key': rapidKey,\n        'Content-Type': 'application/json'\n    }\n};\n\nlet movie_options = JSON.parse(JSON.stringify(others_options));\nlet series_options = JSON.parse(JSON.stringify(others_options));\n\nmovie_options.params.type = 'movie';\nseries_options.params.type = 'series';\n\nexport let movies = [];\nexport let series = [];\n\nexport const clearMediaArrays = function (){\n    movies.length = 0;\n    series.length = 0;\n}\n\nexport const searchNetflixMedia = function (){\n    clearMediaArrays();\n    return axios.request(netflix_options).then(r => {\n        r.data.results.filter(m =>{\n            if(m.vtype === 'movie') movies.push(m);\n            else if (m.vtype === 'series') series.push(m);\n            return 'ok';\n        })\n        return r;\n    })\n    .catch(function (error) {\n        console.error(error);\n        handleError(error);\n        throw error;\n    });\n}\n\nconst request = function (options, array){\n    return axios.request(options).then(res => {\n        res.data.results.filter(s => {\n            array.push(s);\n            return 'ok';\n        })\n        return res;\n    }).catch((er) =>{\n        console.error(er);\n        throw er;\n    })\n}\n\nconst get = function (url, array){\n    return axios.get(url).then(res => {\n        console.log(res);\n        res.data.results.filter(s => {\n            array.push(s);\n            return 'ok';\n        })\n        return res;\n    }).catch((er) =>{\n        console.error(er);\n        throw er;\n    })\n}\n\nexport const searchOtherMedia = function (platform, country){\n    clearMediaArrays();\n    if(platform === 'prime'){\n        movie_options.params.service = 'prime';\n        series_options.params.service = 'prime';\n    }\n    if(platform === 'hbo') {\n        movie_options.params.service = 'hbo';\n        series_options.params.service = 'hbo';\n    }\n\n    movie_options.params.country = country;\n    series_options.params.country = country;\n\n    movie_options.params.page = getRandomNumber(1, 50).toString();\n    series_options.params.page = getRandomNumber(1, 50).toString();\n\n    console.log(movie_options)\n\n    return axios.all(\n        [\n            request(series_options,series),\n            request(movie_options, movies)\n        ]\n    ).then(axios.spread((...res) => {\n        return 'ok';\n    }))\n    .catch((error) => {\n        console.error(error);\n        handleError(error);\n        throw error;\n    });\n}\n\nexport const searchMovieDB = function (region){\n    clearMediaArrays();\n    const page = getRandomNumber(1,50).toString();\n    const movie_url = 'https://api.themoviedb.org/3/movie/top_rated?' +\n        'api_key=' + theMovieDBKey + '&language=en-US&page=' + page + '&region=' + region;\n    const series_url = 'https://api.themoviedb.org/3/tv/top_rated?' +\n        'api_key=' + theMovieDBKey + '&language=en-US&page=' + page;\n    return axios.all([\n        get(movie_url, movies),\n        get(series_url, series)\n    ]).then(axios.spread((...res) => {\n        return 'ok';\n    }))\n    .catch((error) => {\n        console.error(error);\n        handleError(error);\n        throw error;\n    });\n}\n\nexport const paraMatch = function (media, platform){\n    if(platform === 'netflix') {\n        return {\n            id: media.id,\n            title: media.title,\n            year: media.year,\n            img: media.img,\n            desc: media.synopsis,\n            rating: media.imdbrating\n        }\n    } else if(platform === 'themoviedb') {\n        return {\n            id: media.id,\n            title: media.name || media.title,\n            year: media.first_air_date || media.release_date,\n            img: 'https://image.tmdb.org/t/p/w300' + media.backdrop_path,\n            desc: media.overview,\n            rating: media.vote_average\n        }\n    } else {\n        return {\n            id: media.tmdbID,\n            title: media.originalTitle,\n            year: media.year,\n            img: Object.values(media.backdropURLs)[0],\n            desc: media.overview,\n            rating: media.imdbRating\n        }\n    }\n}"],"sourceRoot":""}