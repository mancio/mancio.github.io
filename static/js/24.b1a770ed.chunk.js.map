{"version":3,"sources":["../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/sendForm/sendForm.js","contact/ContactMe.js","passwords/Passwords.js"],"names":["store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","ContactMe","backButton","getMenuItemByTag","className","onSubmit","e","preventDefault","emailjs","serviceForm","templateForm","userForm","then","result","console","log","window","confirm","error","alert","type","name","required","value","ButtonTemplate","id","width","height","svgColor","textColor","textField","icon","iconColor","tag","geoApiKey","rapidKey","unogRapidHost","strAvalHost","theMovieDBKey","API_key"],"mappings":"+LAAaA,EAAQ,CACjBC,QAAS,2BCDAC,EAAiB,SAACC,EAAQC,EAAWC,GAC9C,IAAKF,EACD,KAAM,iFAEV,IAAKC,EACD,KAAM,wEAEV,IAAKC,EACD,KAAM,mFAEV,OAAO,G,OCVEC,EACT,WAAYC,GAAc,oBACtBC,KAAKC,OAASF,EAAaE,OAC3BD,KAAKE,KAAOH,EAAaI,cCDpBC,EAAW,SAACC,EAAKC,GAAuB,IAAjBC,EAAiB,uDAAP,GAC1C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,QAAQ,YAAgB,IAAbC,EAAa,EAAbA,OACtBC,EAAiB,IAAIjB,EAAsBgB,GACnB,MAA1BC,EAAed,QAA0C,OAAxBc,EAAeb,KAChDO,EAAQM,GAGRL,EAAOK,MAGfJ,EAAIE,iBAAiB,SAAS,YAAgB,IAAbC,EAAa,EAAbA,OAC7BJ,EAAO,IAAIZ,EAAsBgB,OAErCH,EAAIK,KAAK,OAAQxB,EAAMC,QAAUY,GAAK,GACtCY,OAAOC,KAAKX,GAASY,SAAQ,SAACC,GAC1BT,EAAIU,iBAAiBD,EAAKb,EAAQa,OAEtCT,EAAIW,KAAKhB,OCjBF,ECoBS,SAACV,EAAWC,EAAY0B,EAAM5B,GAClD,IAAM6B,EAAM7B,GAAUH,EAAMiC,QACtBC,EAvBW,SAACH,GAClB,IAAIG,EAOJ,KALIA,EADgB,kBAATH,EACOI,SAASC,cAAcL,GAGvBA,IAE2B,SAAzBG,EAAYG,SAC5B,KAAM,0FAEV,OAAOH,EAYaI,CAAaP,GACjC7B,EAAe8B,EAAK5B,EAAWC,GAC/B,IAAMkC,EAAW,IAAIC,SAASN,GAK9B,OAJAK,EAASE,OAAO,cAAe,SAC/BF,EAASE,OAAO,aAAcrC,GAC9BmC,EAASE,OAAO,cAAepC,GAC/BkC,EAASE,OAAO,UAAWT,GACpBpB,EAAS,4BAA6B2B,I,wCCvBlC,SAASG,IAEpB,IAAMC,EAAaC,YAAiB,QAepC,OACI,sBAAKC,UAAU,mBAAf,UACI,oBAAIA,UAAU,gBAAd,sCACA,uBAAMA,UAAU,eAAeC,SAhBvC,SAAmBC,GACfA,EAAEC,iBAEFC,EAAiBC,IAAaC,IAAcJ,EAAEzB,OAAQ8B,KACjDC,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAAO5C,MACnB+C,OAAOC,QAAQ,2BAChB,SAACC,GACAJ,QAAQC,IAAIG,EAAMjD,MAClB+C,OAAOG,MAAM,sDAOjB,UACI,8CACA,uBAAOC,KAAK,OAAOC,KAAK,YAAYC,UAAQ,IAC5C,+CACA,uBAAOF,KAAK,QAAQC,KAAK,aAAaC,UAAQ,IAC9C,oDACA,0BAAUD,KAAK,UAAUC,UAAQ,IACjC,uBAAOF,KAAK,SAASG,MAAM,YAE/B,cAACC,EAAA,EAAD,CAEIC,GAAIvB,EAAWuB,GACfC,MAAOxB,EAAWwB,MAClBC,OAAQzB,EAAWyB,OACnBC,SAAU1B,EAAW0B,SACrBC,UAAW3B,EAAW2B,UACtBC,UAAW5B,EAAW4B,UACtBC,KAAM7B,EAAW6B,KACjBC,UAAW9B,EAAW8B,UACtBC,IAAI,QATC/B,EAAWuB,S,gCCxChC,kTACO,IAAMS,EAAY,mCAGZzB,EAAc,kBACdC,EAAe,mBACfC,EAAW,6BAGXwB,EAAW,qDAGXC,EAAgB,yBAGhBC,EAAc,wCAGdC,EAAgB,mCAGhBC,EAAU","file":"static/js/24.b1a770ed.chunk.js","sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, userID) => {\n    const uID = userID || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.2.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","// please visit https://www.emailjs.com for more info (basic account is free)\n\nimport React from 'react';\nimport emailjs from 'emailjs-com';\n\nimport './ContactMe.css';\nimport ButtonTemplate from \"../menu/ButtonTemplate\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport {serviceForm, templateForm, userForm} from \"../passwords/Passwords\";\n\nexport default function ContactMe() {\n\n    const backButton = getMenuItemByTag('back');\n\n    function sendEmail(e) {\n        e.preventDefault();\n\n        emailjs.sendForm(serviceForm, templateForm, e.target, userForm)\n            .then((result) => {\n                console.log(result.text);\n                window.confirm(\"MESSAGE SENT thanks!\");\n            }, (error) => {\n                console.log(error.text);\n                window.alert(\"something got wrong, can you try later please?\");\n            });\n    }\n\n    return (\n        <div className='div-contact-form'>\n            <h1 className='contact-title'> Please leave a message </h1>\n            <form className=\"contact-form\" onSubmit={sendEmail}>\n                <label>Your Name</label>\n                <input type=\"text\" name=\"from_name\" required/>\n                <label>Your Email</label>\n                <input type=\"email\" name=\"user_email\" required/>\n                <label>Leave A Message</label>\n                <textarea name=\"message\" required/>\n                <input type=\"submit\" value=\"Send\" />\n            </form>\n            <ButtonTemplate\n                key={backButton.id}\n                id={backButton.id}\n                width={backButton.width}\n                height={backButton.height}\n                svgColor={backButton.svgColor}\n                textColor={backButton.textColor}\n                textField={backButton.textField}\n                icon={backButton.icon}\n                iconColor={backButton.iconColor}\n                tag='menu'\n            />\n        </div>\n    );\n}","// index page get time\r\nexport const geoApiKey = \"67b6d75b5174440288183e98d31300b6\";\r\n\r\n// contact me form\r\nexport const serviceForm = \"service_rijuz4b\";\r\nexport const templateForm = \"template_glf4e4e\";\r\nexport const userForm = \"user_5cffDNndYp5Lv2j1dOnPe\";\r\n\r\n// rapid key\r\nexport const rapidKey = \"d1c59cf873msh4b26748b3661acbp111084jsn2a3596fb90a3\";\r\n\r\n// netflix\r\nexport const unogRapidHost = \"unogsng.p.rapidapi.com\";\r\n\r\n// hbo and prime\r\nexport const strAvalHost = \"streaming-availability.p.rapidapi.com\";\r\n\r\n// the movie db\r\nexport const theMovieDBKey = \"16b6cf28c0d65bd12befe3ce18853769\";\r\n\r\n// weather\r\nexport const API_key = \"9a072cca30ac7c3ac75362d8edfd3199\";"],"sourceRoot":""}