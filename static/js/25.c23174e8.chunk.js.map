{"version":3,"sources":["dashboard/DashIcon.svg","dashboard/DashLogic.js","dashboard/DashBoard.js","logic/TextHandler.js"],"names":["dashkey","DashBoard","backButton","getMenuItemByTag","inputRef","useRef","saveChanges","text","current","value","localStorage","setItem","useEffect","getItem","className","style","backgroundImage","DashIcon","onChange","ref","onClick","saveToTextFile","ButtonTemplate","id","width","height","svgColor","textColor","textField","icon","iconColor","tag","replaceHtmlCharacters","string","replace","match","dec","String","fromCharCode","uriToYouTube","encodeURI","newLine","tab","copyTextToClipBoard","navigator","clipboard","writeText","filename","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","removeChild"],"mappings":"iNAAe,MAA0B,qCCAnCA,G,OAAU,Y,eCQD,SAASC,IAEpB,IAAMC,EAAaC,YAAiB,QAC9BC,EAAWC,mBAMjB,SAASC,IDXW,IAAUC,ICYjBH,EAASI,QAAQC,MDX9BC,aAAaC,QAAQX,EAASO,GCwB9B,OAlBAK,qBAAU,WACNR,EAASI,QAAQC,MDXdC,aAAaG,QAAQb,IAAY,KCYtC,IAiBE,gCACI,sBAAKc,UAAU,aAAf,UACI,+DACA,mFAEJ,qBAAKA,UAAU,YAAYC,MAAO,CAAEC,gBAAgB,OAAD,OAASC,EAAT,MAAnD,SACI,0BAAUC,SAAUZ,EAAaa,IAAKf,EAAUK,MAAOL,EAASI,YAEpE,sBAAKM,UAAU,eAAf,UACI,wBAAQM,QApBpB,WACIC,YAAejB,EAASI,QAAQC,MAAO,gBAmB/B,2BACA,wBAAQW,QAjBpB,WACIhB,EAASI,QAAQC,MAAQ,GACzBH,KAeQ,gCAEJ,qBAAKQ,UAAU,YAAf,SACI,kIAEJ,cAACQ,EAAA,EAAD,CAEIC,GAAIrB,EAAWqB,GACfC,MAAOtB,EAAWsB,MAClBC,OAAQvB,EAAWuB,OACnBC,SAAUxB,EAAWwB,SACrBC,UAAWzB,EAAWyB,UACtBC,UAAW1B,EAAW0B,UACtBC,KAAM3B,EAAW2B,KACjBC,UAAW5B,EAAW4B,UACtBC,IAAI,QATC7B,EAAWqB,S,gCChDhC,4MAAO,IAAMS,EAAwB,SAAUC,GAC3C,OAAOA,EAAOC,QAAQ,aAAa,SAASC,EAAOC,GAC/C,OAAOC,OAAOC,aAAaF,MAE1BF,QAAQ,UAAW,IACnBA,QAAQ,YAAa,QACrBA,QAAQ,SAAU,KAClBA,QAAQ,WAAY,KACpBA,QAAQ,WAAY,KACpBA,QAAQ,SAAU,MAGdK,EAAe,SAAUN,GAClC,OAAOO,UAAUP,GAAQC,QAAQ,MAAM,QAG9BO,EAAU,WACnB,MAAO,MAGEC,EAAM,WACf,MAAO,MAGEC,EAAsB,SAAUpC,GACzC,OAAOqC,UAAUC,UAAUC,UAAUvC,IAG5Bc,EAAiB,SAAUd,EAAMwC,GAC1C,IAAMC,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAAC7C,GAAO,CAC1B8C,KAAM,eAEVL,EAAQM,KAAOC,IAAIC,gBAAgBL,GACnCH,EAAQS,SAAWV,EACnBE,SAASS,KAAKC,YAAYX,GAC1BA,EAAQY,QACRX,SAASS,KAAKG,YAAYb","file":"static/js/25.c23174e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/DashIcon.3d2b3fa6.svg\";","const dashkey = 'dashtext';\n\nexport const getText = function (){\n    return localStorage.getItem(dashkey) || '';\n}\n\nexport const saveText = function (text){\n    localStorage.setItem(dashkey, text);\n}\n\n","import ButtonTemplate from \"../menu/ButtonTemplate\";\nimport React, {useEffect, useRef} from \"react\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport DashIcon from \"./DashIcon.svg\";\nimport './DashBoard.css'\nimport {getText, saveText} from \"./DashLogic\";\nimport {saveToTextFile} from \"../logic/TextHandler\";\n\nexport default function DashBoard(){\n\n    const backButton = getMenuItemByTag('back');\n    const inputRef = useRef();\n\n    useEffect(() => {\n        inputRef.current.value = getText();\n    },[])\n\n    function saveChanges(){\n        saveText(inputRef.current.value);\n    }\n\n    function exportTXT(){\n        saveToTextFile(inputRef.current.value, \"mynotes.txt\");\n    }\n\n    function clearDash(){\n        inputRef.current.value = \"\";\n        saveChanges();\n    }\n\n\n    return(\n        <div>\n            <div className='dash-intro'>\n                <h3>Here you can write your notes</h3>\n                <h4>Text is automatically saved in browser session</h4>\n            </div>\n            <div className='dashboard' style={{ backgroundImage: `url(${DashIcon})` }}>\n                <textarea onChange={saveChanges} ref={inputRef} value={inputRef.current}/>\n            </div>\n            <div className='dash-buttons'>\n                <button onClick={exportTXT}>Export to TXT</button>\n                <button onClick={clearDash}>Clear Dashboard</button>\n            </div>\n            <div className='dash-note'>\n                <p>Please don't save any password in the dashboard. The text is saved in cookies and can be hacked</p>\n            </div>\n            <ButtonTemplate\n                key={backButton.id}\n                id={backButton.id}\n                width={backButton.width}\n                height={backButton.height}\n                svgColor={backButton.svgColor}\n                textColor={backButton.textColor}\n                textField={backButton.textField}\n                icon={backButton.icon}\n                iconColor={backButton.iconColor}\n                tag='menu'\n            />\n        </div>\n\n    )\n}","export const replaceHtmlCharacters = function (string){\n    return string.replace(/&#(\\d+);/g, function(match, dec) {\n        return String.fromCharCode(dec);\n    })\n        .replace(/&quot;/g, '')\n        .replace(/&eacute;/g, 'Ã©')\n        .replace(/&amp;/g, '\"')\n        .replace(/&ldquo;/g, '\"')\n        .replace(/&rdquo;/g, '\"')\n        .replace(/&shy;/g, '-');\n}\n\nexport const uriToYouTube = function (string){\n    return encodeURI(string).replace(/&/gi,'%26');\n}\n\nexport const newLine = function (){\n    return \"\\n\";\n}\n\nexport const tab = function (){\n    return \"\\t\";\n}\n\nexport const copyTextToClipBoard = function (text){\n    return navigator.clipboard.writeText(text);\n}\n\nexport const saveToTextFile = function (text, filename){\n    const element = document.createElement('a');\n    const file = new Blob([text], {\n        type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n    document.body.removeChild(element);\n}"],"sourceRoot":""}