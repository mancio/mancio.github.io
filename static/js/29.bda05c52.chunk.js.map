{"version":3,"sources":["tv/EnterLink.js","tv/ParsingHandler.js"],"names":["EnterLink","back","getMenuItemByTag","navigate","useNavigate","useState","url","setUrl","file","setFile","className","onSubmit","e","preventDefault","setParsedTvList","then","catch","window","alert","type","name","value","onChange","target","placeholder","required","setParsedFileTvList","setTimeout","location","reload","files","href","rel","id","width","height","svgColor","textColor","textField","icon","iconColor","tag","fileReader","getTextFromLink","link","a","fetch","res","text","undefined","body","playlist","jsonTvListItemsAsString","JSON","stringify","parser","parse","items","localStorage","setItem","handleFileRead","result","parsedList","console","log","jsonTvList","FileReader","readAsText","onloadend","getParsedTvList","list","getItem","getTvUrlByIndex","addStoHttp","indexOf","substring"],"mappings":"uPAOe,SAASA,IAEpB,IAAMC,EAAOC,YAAiB,QACxBC,EAAWC,cAEjB,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KA2BA,OACI,gCACI,oBAAIC,UAAU,uBAAd,2CACA,+DACA,gFACA,wDACA,sBAAKA,UAAU,UAAf,UACI,uBAAMC,SAhClB,SAAkBC,GACdA,EAAEC,iBACFC,YAAgBR,GACXS,MAAK,kBAAMZ,EAAS,eACpBa,OAAM,kBAAMC,OAAOC,MAAM,2BA4BtB,UACI,+CACA,uBAAOC,KAAK,MAAMC,KAAK,MAAMC,MAAOf,EAAKgB,SAjBzD,SAAkBV,GACdL,EAAOK,EAAEW,OAAOF,QAgByDG,YAAY,UAAUC,UAAQ,IAC3F,uBAAON,KAAK,SAASE,MAAM,YAE/B,uBAAMV,SA9BlB,SAAkBC,GACdA,EAAEC,iBACFa,YAAoBlB,GACfO,MAAK,kBAAMZ,EAAS,eACpBY,MAAK,kBAAMY,YAAW,WACnBV,OAAOW,SAASC,cACjB,KACFb,OAAM,kBAAMC,OAAOC,MAAM,2BAuBtB,UACI,+CACA,uBAAOC,KAAK,OAAOC,KAAK,OAAOE,SAlB/C,SAAmBV,GACfH,EAAQG,EAAEW,OAAOO,MAAM,KAiByCL,UAAQ,IAC5D,uBAAON,KAAK,SAASE,MAAM,eAGnC,oJAGI,mBAAGU,KAAK,wDAAwDR,OAAO,SAASS,IAAI,aAApF,sEAIJ,cAAC,IAAD,CAEIC,GAAIhC,EAAKgC,GACTC,MAAOjC,EAAKiC,MACZC,OAAQlC,EAAKkC,OACbC,SAAUnC,EAAKmC,SACfC,UAAWpC,EAAKoC,UAChBC,UAAWrC,EAAKqC,UAChBC,KAAMtC,EAAKsC,KACXC,UAAWvC,EAAKuC,UAChBC,IAAI,QATCxC,EAAKgC,S,8MClDtBS,E,0CAdSC,EAAe,uCAAG,WAAgBC,GAAhB,iBAAAC,EAAA,sEACTC,MAAMF,GADG,cACrBG,EADqB,gBAERA,EAAIC,OAFI,eAGfC,KADNC,EAFqB,iDAGGA,GAHH,gCAIpB,SAJoB,2CAAH,sDAQfpC,EAAe,uCAAG,WAAgB8B,GAAhB,iBAAAC,EAAA,sEACJF,EAAgBC,GADZ,OACrBO,EADqB,OAErBC,EAA0BC,KAAKC,UAAUC,IAAOC,MAAML,GAAUM,OACtEC,aAAaC,QAAQ,cAAcP,GAHR,2CAAH,sDAQtBQ,EAAiB,WACnB,IAAMT,EAAWT,EAAWmB,OACtBC,EAAaP,IAAOC,MAAML,GAAUM,MAC1CM,QAAQC,IAAIF,GACZ,IAAMG,EAAaZ,KAAKC,UAAUQ,GAClCJ,aAAaC,QAAQ,cAAeM,IAG3BvC,EAAmB,uCAAG,WAAgBlB,GAAhB,SAAAqC,EAAA,uDAC/BH,EAAa,IAAIwB,YACNC,WAAW3D,GACtBkC,EAAW0B,UAAYR,EAHQ,2CAAH,sDAMnBS,EAAkB,WAC3B,IAAMC,EAAOjB,KAAKG,MAAME,aAAaa,QAAQ,gBAE7C,OADAR,QAAQC,IAAIM,GACLA,GAGEE,EAAkB,SAAUvC,GAErC,OADaoB,KAAKG,MAAME,aAAaa,QAAQ,gBACjCtC,GAAI3B,KAGPmE,EAAa,SAAUnE,GAChC,OAAgC,IAA5BA,EAAIoE,QAAQ,YACLpE,EAEA,QAAUA,EAAIqE,UAAU","file":"static/js/29.bda05c52.chunk.js","sourcesContent":["import ButtonTemplate from \"../menu/ButtonTemplate\";\nimport React, {useState} from \"react\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport './Enterlink.css';\nimport {useNavigate} from \"react-router-dom\";\nimport {setParsedFileTvList, setParsedTvList} from \"./ParsingHandler\";\n\nexport default function EnterLink(){\n\n    const back = getMenuItemByTag('back');\n    const navigate = useNavigate();\n\n    const [url, setUrl] = useState('');\n    const [file, setFile] = useState(null);\n\n    function sendLink(e){\n        e.preventDefault();\n        setParsedTvList(url)\n            .then(() => navigate('/watchTv'))\n            .catch(() => window.alert(\"something got wrong\"));\n    }\n\n    function sendFile(e){\n        e.preventDefault();\n        setParsedFileTvList(file)\n            .then(() => navigate('/watchTv'))\n            .then(() => setTimeout(() => {\n                window.location.reload();\n            }),1000)\n            .catch(() => window.alert(\"something got wrong\"));\n    }\n\n    function urlState(e){\n        setUrl(e.target.value);\n    }\n\n    function fileState(e){\n        setFile(e.target.files[0]);\n    }\n\n    return(\n        <div>\n            <h1 className='player-welcome-title'> Welcome in the media player </h1>\n            <p> Here you can play your media </p>\n            <p> Just add the link or file and push the button </p>\n            <p> Supported format: .m3u</p>\n            <div className='tv-form'>\n                <form onSubmit={sendLink}>\n                    <label>Enter link</label>\n                    <input type=\"url\" name=\"url\" value={url} onChange={urlState} placeholder='http://' required/>\n                    <input type=\"submit\" value=\"Play\" />\n                </form>\n                <form onSubmit={sendFile}>\n                    <label>Enter file</label>\n                    <input type=\"file\" name=\"file\" onChange={fileState} required/>\n                    <input type=\"submit\" value=\"Play\" />\n                </form>\n            </div>\n            <p>\n                Remember! the link cannot be protected with password and must be LEGAL and a text file (RAW format on GitHub):\n                &nbsp;\n                <a href='https://github.com/iptv-org/iptv/tree/master/channels' target=\"_blank\" rel=\"noreferrer\">\n                    https://github.com/iptv-org/iptv/tree/master/channels\n                </a>\n            </p>\n            <ButtonTemplate\n                key={back.id}\n                id={back.id}\n                width={back.width}\n                height={back.height}\n                svgColor={back.svgColor}\n                textColor={back.textColor}\n                textField={back.textField}\n                icon={back.icon}\n                iconColor={back.iconColor}\n                tag='menu'\n            />\n        </div>\n    )\n}","import parser from 'iptv-playlist-parser'\n\nexport const getTextFromLink = async function (link) {\n    const res = await fetch(link);\n    const body = await res.text();\n    if(body !== undefined) return body;\n    return 'error';\n\n}\n\nexport const setParsedTvList = async function (link) {\n    const playlist = await getTextFromLink(link);\n    const jsonTvListItemsAsString = JSON.stringify(parser.parse(playlist).items);\n    localStorage.setItem('tvListItems',jsonTvListItemsAsString);\n}\n\nlet fileReader;\n\nconst handleFileRead = function (){\n    const playlist = fileReader.result;\n    const parsedList = parser.parse(playlist).items;\n    console.log(parsedList);\n    const jsonTvList = JSON.stringify(parsedList);\n    localStorage.setItem('tvListItems', jsonTvList);\n}\n\nexport const setParsedFileTvList = async function (file){\n    fileReader = new FileReader();\n    fileReader.readAsText(file);\n    fileReader.onloadend = handleFileRead;\n}\n\nexport const getParsedTvList = function (){\n    const list = JSON.parse(localStorage.getItem('tvListItems'));\n    console.log(list);\n    return list;\n}\n\nexport const getTvUrlByIndex = function (id){\n    const list = JSON.parse(localStorage.getItem('tvListItems'));\n    return list[id].url;\n}\n\nexport const addStoHttp = function (url){\n    if (url.indexOf(\"https://\") === 0){\n        return url;\n    }else {\n        return \"https\" + url.substring(4);\n    }\n}"],"sourceRoot":""}