{"version":3,"sources":["series/FilterSeries.js","logic/TextHandler.js","passwords/Passwords.js","logic/ErrorsHandler.js","series/SeriesHandler.js"],"names":["FilterSeries","back","getMenuItemByTag","useState","media","setMedia","oldMedia","setOldMedia","requested","setRequested","ready","setReady","refresh","setRefresh","tag","useParams","getDone","printError","document","getElementById","insertAdjacentHTML","clickMedia","type","searchNetflixMedia","then","searchOtherMedia","catch","searchMovieDB","clickRefresh","cardGen","className","map","item","s","paraMatch","Img","onClick","title","year","str","uriToYouTube","replaceHtmlCharacters","window","open","focus","youtubeTrailer","variant","src","img","Body","Title","Text","desc","Item","rating","id","useEffect","toUpperCase","series","movies","width","height","svgColor","textColor","textField","icon","iconColor","string","replace","match","dec","String","fromCharCode","encodeURI","newLine","tab","copyTextToClipBoard","text","navigator","clipboard","writeText","saveToTextFile","filename","element","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","removeChild","geoApiKey","serviceForm","templateForm","userForm","rapidKey","unogRapidHost","strAvalHost","theMovieDBKey","API_key","handleError","error","response","status","number","alert","platformButtons","idPlusPlus","getMoviePlatformMenu","netflix_options","method","url","params","start_year","orderby","audiosubtitle_andor","start_rating","limit","subtitle","audio","offset","end_year","headers","others_options","country","service","page","output_language","language","movie_options","JSON","parse","stringify","series_options","clearMediaArrays","length","axios","request","r","data","results","filter","m","vtype","push","console","options","array","res","er","get","log","platform","getRandomNumber","toString","all","spread","region","movie_url","series_url","synopsis","imdbrating","name","first_air_date","release_date","backdrop_path","overview","vote_average","tmdbID","originalTitle","Object","values","backdropURLs","imdbRating"],"mappings":"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","file":"static/js/18.7b0e7294.chunk.js","sourcesContent":["import ButtonTemplate from \"../menu/ButtonTemplate\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport {useParams} from \"react-router-dom\";\nimport './FilterSeries.css';\nimport {useEffect, useState} from \"react\";\nimport {movies, paraMatch, searchMovieDB, searchNetflixMedia, searchOtherMedia, series} from \"./SeriesHandler\";\nimport {replaceHtmlCharacters, uriToYouTube} from \"../logic/TextHandler\";\nimport {Card, ListGroup} from \"react-bootstrap\";\n\nexport default function FilterSeries(){\n\n    const back = getMenuItemByTag('back');\n\n    const [media, setMedia] = useState(null);\n    const [oldMedia, setOldMedia] = useState(null);\n    const [requested, setRequested] = useState(false);\n    const [ready, setReady] = useState(false);\n    const [refresh, setRefresh] = useState(false);\n\n    const tag = useParams().tag;\n\n    function getDone(){\n        setReady(true);\n        setRequested(false);\n    }\n\n    function printError(){\n        document.getElementById('media-error')\n            .insertAdjacentHTML('afterend', '<div><p>Unable to get results, please try later</p></div>');\n    }\n\n    function clickMedia(type){\n        setOldMedia(type);\n        setRequested(true);\n        if (tag === 'netflix' && !ready) {\n            searchNetflixMedia().then(() => getDone());\n        }\n        if (tag === 'prime' && !ready) {\n            searchOtherMedia(tag, 'pl')\n                .then(() => {\n                    getDone();\n                })\n                .catch(()=> printError());\n        }\n        if (tag === 'hbo' && !ready) {\n            searchOtherMedia(tag,'us').then(() => getDone())\n                .catch(() => printError());\n        }\n        if (tag === 'themoviedb' && !ready) {\n            searchMovieDB('PL').then(() => getDone())\n                .catch(() => printError());\n        }\n        setMedia(type);\n        if (ready) setRequested(false);\n    }\n\n    function clickRefresh(){\n        setMedia(null);\n        setRequested(false);\n        setReady(false);\n        setRefresh(true);\n    }\n\n    useEffect(() => {\n        if(!media && !requested && !ready && refresh) {\n            setRefresh(false);\n            clickMedia(oldMedia);\n        }\n        // eslint-disable-next-line\n    },[refresh]);\n\n    function youtubeTrailer(title, type, year){\n        const str = uriToYouTube(replaceHtmlCharacters(title) + ' trailer ' + type + ' ' + year);\n        window.open('https://www.youtube.com/results?search_query=' + str, '_blank').focus();\n    }\n\n    function cardGen(type){\n        return <div className='movie-card-grid'>\n            {type.map(item => {\n                const s = paraMatch(item, tag);\n                return <div key={s.id}>\n                <Card className='movie-card'>\n                    <Card.Img onClick={() => youtubeTrailer(s.title, media, s.year)} variant=\"top\" src={s.img} />\n                    <Card.Body>\n                        <Card.Title>{replaceHtmlCharacters(s.title)}</Card.Title>\n                        <Card.Text>\n                            {replaceHtmlCharacters(s.desc)}\n                        </Card.Text>\n                    </Card.Body>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>IMBD Rating: {s.rating}</ListGroup.Item>\n                        <ListGroup.Item>Year: {s.year}</ListGroup.Item>\n                    </ListGroup>\n                </Card>\n            </div>})}\n        </div>\n    }\n\n    return(\n        <div className='filter-platform'>\n            <h1>Search Best show on {tag.toUpperCase()}</h1>\n            <button onClick={() => clickMedia('series')}>Series</button>\n            <button onClick={() => clickMedia('movies')}>Movies</button>\n            {media && tag === 'themoviedb' && <button onClick={() => clickRefresh()}>Refresh</button>}\n            {requested && <p>please wait</p>}\n            {\n                (media === 'series' && ready) &&\n                <>\n                    <div>\n                        <p>Series List</p>\n                        {cardGen(series)}\n                    </div>\n                </>\n            }\n            {\n                (media === 'movies' && ready) && <>\n                    <div>\n                        <p>Movies List</p>\n                        {cardGen(movies)}\n                    </div>\n                </>\n            }\n            <div id='media-error'/>\n            {media && tag === 'themoviedb' && <button onClick={() => clickRefresh()}>Refresh</button>}\n            <ButtonTemplate\n                key={back.id}\n                id={back.id}\n                width={back.width}\n                height={back.height}\n                svgColor={back.svgColor}\n                textColor={back.textColor}\n                textField={back.textField}\n                icon={back.icon}\n                iconColor={back.iconColor}\n                tag='platform'\n            />\n        </div>\n    )\n}","export const replaceHtmlCharacters = function (string){\n    return string.replace(/&#(\\d+);/g, function(match, dec) {\n        return String.fromCharCode(dec);\n    })\n        .replace(/&quot;/g, '')\n        .replace(/&eacute;/g, 'é')\n        .replace(/&amp;/g, '\"')\n        .replace(/&ldquo;/g, '\"')\n        .replace(/&rdquo;/g, '\"')\n        .replace(/&shy;/g, '-');\n}\n\nexport const uriToYouTube = function (string){\n    return encodeURI(string).replace(/&/gi,'%26');\n}\n\nexport const newLine = function (){\n    return \"\\n\";\n}\n\nexport const tab = function (){\n    return \"\\t\";\n}\n\nexport const copyTextToClipBoard = function (text){\n    return navigator.clipboard.writeText(text);\n}\n\nexport const saveToTextFile = function (text, filename){\n    const element = document.createElement('a');\n    const file = new Blob([text], {\n        type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n    document.body.removeChild(element);\n}","// index page get time\r\nexport const geoApiKey = \"67b6d75b5174440288183e98d31300b6\";\r\n\r\n// contact me form\r\nexport const serviceForm = \"service_rijuz4b\";\r\nexport const templateForm = \"template_glf4e4e\";\r\nexport const userForm = \"user_5cffDNndYp5Lv2j1dOnPe\";\r\n\r\n// rapid key\r\nexport const rapidKey = \"d1c59cf873msh4b26748b3661acbp111084jsn2a3596fb90a3\";\r\n\r\n// netflix\r\nexport const unogRapidHost = \"unogsng.p.rapidapi.com\";\r\n\r\n// hbo and prime\r\nexport const strAvalHost = \"streaming-availability.p.rapidapi.com\";\r\n\r\n// the movie db\r\nexport const theMovieDBKey = \"16b6cf28c0d65bd12befe3ce18853769\";\r\n\r\n// weather\r\nexport const API_key = \"9a072cca30ac7c3ac75362d8edfd3199\";","export const handleError = function (error){\n    if(error.response.status){\n        const number = error.response.status;\n        if(number === 429) {\n            window.alert(\"Too many requests, please try later\");\n        }\n        if(number === 400){\n            window.alert(\"Not working\");\n        }\n    }else {\n        window.alert(\"Something got wrong\");\n    }\n}","import {getRandomNumber, idPlusPlus} from \"../logic/Counter\";\nimport axios from \"axios\";\nimport {unogRapidHost, rapidKey, strAvalHost, theMovieDBKey} from \"../passwords/Passwords\";\nimport {handleError} from \"../logic/ErrorsHandler\";\n\nconst textColor = '#ffffff';\n\nconst platformButtons = [\n    {\n        id: idPlusPlus(),\n        width:250,\n        height:55,\n        svgColor:'#bd1414',\n        textColor: textColor,\n        textField:'NETFLIX PL',\n        icon: 'TV',\n        iconColor: '#bd1414',\n        tag: 'netflix'\n    },\n    {\n        id: idPlusPlus(),\n        width:250,\n        height:55,\n        svgColor:'#1224cd',\n        textColor: textColor,\n        textField:'HBO US',\n        icon: 'TV',\n        iconColor: '#1224cd',\n        tag: 'hbo'\n    },\n    {\n        id: idPlusPlus(),\n        width:250,\n        height:55,\n        svgColor:'#ffa200',\n        textColor: textColor,\n        textField:'PRIME PL',\n        icon: 'TV',\n        iconColor: '#ffa200',\n        tag: 'prime'\n    },\n    {\n        id: idPlusPlus(),\n        width:250,\n        height:55,\n        svgColor:'#1773ce',\n        textColor: textColor,\n        textField:'THE MOVIE DB',\n        icon: 'TV',\n        iconColor: '#1773ce',\n        tag: 'themoviedb'\n    }\n]\n\nexport const getMoviePlatformMenu = function (){\n    return platformButtons;\n}\n\nconst netflix_options = {\n    method: 'GET',\n    url: 'https://unogsng.p.rapidapi.com/search',\n    params: {\n        start_year: '2000',\n        orderby: 'dateDesc',\n        audiosubtitle_andor: 'and',\n        start_rating: '7',\n        limit: '100',\n        subtitle: 'english',\n        audio: 'english',\n        offset: '0',\n        end_year: '2021'\n    },\n    headers: {\n        'x-rapidapi-host': unogRapidHost,\n        'x-rapidapi-key': rapidKey\n    }\n};\n\nconst others_options = {\n    method: 'GET',\n    url: 'https://streaming-availability.p.rapidapi.com/search/basic',\n    params: {\n        country: 'pl',\n        service: '',\n        type: '',\n        page: '1',\n        output_language: 'en',\n        language: 'en'\n    },\n    headers: {\n        'x-rapidapi-host': strAvalHost,\n        'x-rapidapi-key': rapidKey,\n        'Content-Type': 'application/json'\n    }\n};\n\nlet movie_options = JSON.parse(JSON.stringify(others_options));\nlet series_options = JSON.parse(JSON.stringify(others_options));\n\nmovie_options.params.type = 'movie';\nseries_options.params.type = 'series';\n\nexport let movies = [];\nexport let series = [];\n\nexport const clearMediaArrays = function (){\n    movies.length = 0;\n    series.length = 0;\n}\n\nexport const searchNetflixMedia = function (){\n    clearMediaArrays();\n    return axios.request(netflix_options).then(r => {\n        r.data.results.filter(m =>{\n            if(m.vtype === 'movie') movies.push(m);\n            else if (m.vtype === 'series') series.push(m);\n            return 'ok';\n        })\n        return r;\n    })\n    .catch(function (error) {\n        console.error(error);\n        handleError(error);\n        throw error;\n    });\n}\n\nconst request = function (options, array){\n    return axios.request(options).then(res => {\n        res.data.results.filter(s => {\n            array.push(s);\n            return 'ok';\n        })\n        return res;\n    }).catch((er) =>{\n        console.error(er);\n        throw er;\n    })\n}\n\nconst get = function (url, array){\n    return axios.get(url).then(res => {\n        console.log(res);\n        res.data.results.filter(s => {\n            array.push(s);\n            return 'ok';\n        })\n        return res;\n    }).catch((er) =>{\n        console.error(er);\n        throw er;\n    })\n}\n\nexport const searchOtherMedia = function (platform, country){\n    clearMediaArrays();\n    if(platform === 'prime'){\n        movie_options.params.service = 'prime';\n        series_options.params.service = 'prime';\n    }\n    if(platform === 'hbo') {\n        movie_options.params.service = 'hbo';\n        series_options.params.service = 'hbo';\n    }\n\n    movie_options.params.country = country;\n    series_options.params.country = country;\n\n    movie_options.params.page = getRandomNumber(1, 50).toString();\n    series_options.params.page = getRandomNumber(1, 50).toString();\n\n    console.log(movie_options)\n\n    return axios.all(\n        [\n            request(series_options,series),\n            request(movie_options, movies)\n        ]\n    ).then(axios.spread((...res) => {\n        return 'ok';\n    }))\n    .catch((error) => {\n        console.error(error);\n        handleError(error);\n        throw error;\n    });\n}\n\nexport const searchMovieDB = function (region){\n    clearMediaArrays();\n    const page = getRandomNumber(1,50).toString();\n    const movie_url = 'https://api.themoviedb.org/3/movie/top_rated?' +\n        'api_key=' + theMovieDBKey + '&language=en-US&page=' + page + '&region=' + region;\n    const series_url = 'https://api.themoviedb.org/3/tv/top_rated?' +\n        'api_key=' + theMovieDBKey + '&language=en-US&page=' + page;\n    return axios.all([\n        get(movie_url, movies),\n        get(series_url, series)\n    ]).then(axios.spread((...res) => {\n        return 'ok';\n    }))\n    .catch((error) => {\n        console.error(error);\n        handleError(error);\n        throw error;\n    });\n}\n\nexport const paraMatch = function (media, platform){\n    if(platform === 'netflix') {\n        return {\n            id: media.id,\n            title: media.title,\n            year: media.year,\n            img: media.img,\n            desc: media.synopsis,\n            rating: media.imdbrating\n        }\n    } else if(platform === 'themoviedb') {\n        return {\n            id: media.id,\n            title: media.name || media.title,\n            year: media.first_air_date || media.release_date,\n            img: 'https://image.tmdb.org/t/p/w300' + media.backdrop_path,\n            desc: media.overview,\n            rating: media.vote_average\n        }\n    } else {\n        return {\n            id: media.tmdbID,\n            title: media.originalTitle,\n            year: media.year,\n            img: Object.values(media.backdropURLs)[0],\n            desc: media.overview,\n            rating: media.imdbRating\n        }\n    }\n}"],"sourceRoot":""}