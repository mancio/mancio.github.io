{"version":3,"sources":["alwayson/AlwaysOnHandler.js","alwayson/Ps1Code.js","alwayson/AlwaysOn.js","logic/TextHandler.js"],"names":["emoticons","Ps1Code","code","newLine","tab","className","value","height","theme","readOnly","extensions","rust","jsx","onClick","copyTextToClipBoard","then","window","alert","saveToTextFile","AlwaysOn","navigate","useNavigate","path","location","pathname","host","hostname","backButton","getMenuItemByTag","useState","visible","setVisible","hide","setHide","button","setButton","play","setPlay","script","setScript","useEffect","setTimeout","clearTimeout","url","width","playing","loop","controls","pip","Math","floor","random","length","href","src","alt","ButtonTemplate","id","svgColor","textColor","textField","icon","iconColor","tag","replaceHtmlCharacters","string","replace","match","dec","String","fromCharCode","uriToYouTube","encodeURI","text","navigator","clipboard","writeText","filename","element","document","createElement","file","Blob","type","URL","createObjectURL","download","body","appendChild","click","removeChild"],"mappings":"+OAAMA,G,OAAY,CAAC,2BAAO,uCAAS,uCAAS,eAAK,qBAAM,2BAAO,eAAK,eAAK,eAAK,2BAAO,eAAK,eAAK,iB,0CCM/E,SAASC,IAEpB,IAAMC,EAAO,6CAA+CC,cAC5D,cAAgBA,cAAYC,cAAQ,8BAAgCD,cAAYC,cAChF,0BAA4BD,cAAY,IAUxC,OACI,gCACI,qBAAKE,UAAU,WAAf,SACI,cAAC,IAAD,CACIC,MAAOJ,EACPK,OAAO,QACPC,MAAM,OACNC,SAAS,OACTC,WAAY,CAACC,YAAK,CAAEC,KAAK,SAGjC,wBAAQP,UAAU,sBAAsBQ,QAAS,WAlBrDC,YAAoBZ,GAAMa,MAAK,kBAAMC,OAAOC,MAAM,eAkB9C,+BACA,wBAAQZ,UAAU,sBAAsBQ,QAAS,WAfrDK,YAAehB,EAAM,cAejB,8B,2BCtBG,SAASiB,IAEpB,IAAMC,EAAWC,cACXC,EAAON,OAAOO,SAASC,SACvBC,EAAOT,OAAOO,SAASG,SAEvBC,EAAaC,YAAiB,QAEpC,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,oBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,mBAAS,cAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA4BR,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KAkDA,OAhDAC,qBAAU,WACM,SAATlB,GACCiB,GAAU,GACVF,GAAQ,KAERN,GAAW,GACXE,GAAQ,GACRE,EAAU,cACVE,GAAQ,GACRE,GAAU,MAEhB,CAACjB,IA+BHkB,qBAAU,WAGN,OAFGV,EAASW,YAAW,WAAMV,GAAW,KAAQ,KAC3CU,YAAW,WAAMV,GAAW,KAAO,KACjC,kBAAMW,kBACf,CAACZ,IAGC,sBAAKzB,UAAU,YAAf,WACM+B,IAASE,GAAU,wBAAQzB,QA1BrC,WAKIwB,GAAQ,GACRN,GAAW,IAoBoC1B,UAAU,kBAAhC,6BACpB+B,GAAQ,wBAAQ/B,UAAU,sBAAsBQ,QAtCzD,WACQmB,GACAC,GAAQ,GACRE,EAAU,gBAEVF,GAAQ,GACRI,GAAQ,GACRF,EAAU,UA+BD,SAA4DD,KACnEF,GAAQI,GACN,qCACI,kFACA,sFAGPN,GAAWM,GACR,qBAAK/B,UAAY2B,EAAmC,iCAA5B,2BAAxB,SACI,cAAC,IAAD,CACI3B,UAAU,yBACVsC,IAAI,uFACJC,MAAM,OACNrC,OAAO,OACPsC,SAAS,EACTC,MAAM,EACNC,UAAU,EACVC,KAAK,OAIflB,GAAWM,GACT,qBAAK/B,UAAU,iBAAf,SACI,4BF/FTL,EAAUiD,KAAKC,MAAMD,KAAKE,SAAWnD,EAAUoD,aEkG7ChB,IAASJ,GACN,8BACI,8CAAgB,mBAAGqB,KAAM,kBAAM,GAAOhD,UAAU,cAAcQ,QAAS,WA5CnFO,EAAS,SA4CmB,oCAGvBkB,GACG,sBAAKjC,UAAU,sBAAf,UACI,8BAAG,qBACCA,UAAU,iBACViD,IAAI,yIACJC,IAAI,oBAHR,8BAMA,gHACA,cAAC,EAAD,IACA,qDAAuB,mBAAGF,KAAM,kBAAM,GAAOhD,UAAU,cAAcQ,QAAS,WArD1FC,YAAoBW,EAAO,QAAQV,MAAK,kBAAIC,OAAOC,MAAM,yDAqDtB,kCACvB,cAACuC,EAAA,EAAD,CAEIC,GAAI9B,EAAW8B,GACfb,MAAOjB,EAAWiB,MAClBrC,OAAQoB,EAAWpB,OACnBmD,SAAU/B,EAAW+B,SACrBC,UAAWhC,EAAWgC,UACtBC,UAAWjC,EAAWiC,UACtBC,KAAMlC,EAAWkC,KACjBC,UAAWnC,EAAWmC,UACtBC,IAAI,QATCpC,EAAW8B,Y,gCCtHxC,4MAAO,IAAMO,EAAwB,SAAUC,GAC3C,OAAOA,EAAOC,QAAQ,aAAa,SAASC,EAAOC,GAC/C,OAAOC,OAAOC,aAAaF,MAE1BF,QAAQ,UAAW,IACnBA,QAAQ,YAAa,QACrBA,QAAQ,SAAU,KAClBA,QAAQ,WAAY,KACpBA,QAAQ,WAAY,KACpBA,QAAQ,SAAU,MAGdK,EAAe,SAAUN,GAClC,OAAOO,UAAUP,GAAQC,QAAQ,MAAM,QAG9B/D,EAAU,WACnB,MAAO,MAGEC,EAAM,WACf,MAAO,MAGEU,EAAsB,SAAU2D,GACzC,OAAOC,UAAUC,UAAUC,UAAUH,IAG5BvD,EAAiB,SAAUuD,EAAMI,GAC1C,IAAMC,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACT,GAAO,CAC1BU,KAAM,eAEVL,EAAQzB,KAAO+B,IAAIC,gBAAgBJ,GACnCH,EAAQQ,SAAWT,EACnBE,SAASQ,KAAKC,YAAYV,GAC1BA,EAAQW,QACRV,SAASQ,KAAKG,YAAYZ","file":"static/js/16.8b0e6460.chunk.js","sourcesContent":["const emoticons = ['🤹🏼','🤹🏼‍♀','🧜🏽‍♂','🚀','‍✈️','🚴🏿','🙉','🐳','🏎','🏄🏿','☃️','🧸','🃏'];\n\nexport const getRandEmoticons = function (){\n    return emoticons[Math.floor(Math.random() * emoticons.length)];\n}","import React from \"react\";\r\nimport CodeMirror from \"@uiw/react-codemirror\";\r\nimport { rust } from \"@codemirror/lang-rust\";\r\nimport './Ps1Code.css'\r\nimport {copyTextToClipBoard, newLine, saveToTextFile, tab} from \"../logic/TextHandler\";\r\n\r\nexport default function Ps1Code() {\r\n\r\n    const code = '$wsh = New-Object -ComObject WScript.Shell' + newLine() +\r\n    'while (1) {' + newLine() + tab() + '$wsh.SendKeys(\"{CAPSLOCK}\")' + newLine() + tab() +\r\n    'Start-Sleep -seconds 30' + newLine() + '}'\r\n\r\n    function copyToClip(){\r\n        copyTextToClipBoard(code).then(() => window.alert(\"Copied!\"));\r\n    }\r\n\r\n    function saveToFile(){\r\n        saveToTextFile(code, \"press.ps1\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='code-tab'>\r\n                <CodeMirror\r\n                    value={code}\r\n                    height=\"150px\"\r\n                    theme=\"dark\"\r\n                    readOnly=\"true\"\r\n                    extensions={[rust({ jsx: true })]}\r\n                />\r\n            </div>\r\n            <button className='click-ps1-copy-code' onClick={() => copyToClip()}>Copy to clipboard</button>\r\n            <button className='click-ps1-copy-code' onClick={() => saveToFile()}>Download file</button>\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useState} from 'react'\nimport ReactPlayer from 'react-player'\nimport './AlwaysOn.css';\nimport {getRandEmoticons} from \"./AlwaysOnHandler\";\nimport Ps1Code from \"./Ps1Code\";\nimport ButtonTemplate from \"../menu/ButtonTemplate\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport {copyTextToClipBoard} from \"../logic/TextHandler\";\nimport {useNavigate} from \"react-router-dom\";\n\nexport default function AlwaysOn(){\n\n    const navigate = useNavigate();\n    const path = window.location.pathname;\n    const host = window.location.hostname;\n\n    const backButton = getMenuItemByTag('back');\n\n    const [visible, setVisible] = useState(true);\n    const [hide, setHide] = useState(false);\n    const [button, setButton] = useState('Hide Text!');\n    const [play, setPlay] = useState(false);\n    const [script, setScript] = useState(false);\n\n    useEffect(()=>{\n        if(path === '/ps1') {\n            setScript(true);\n            setPlay(false);\n        }else {\n            setVisible(true);\n            setHide(false);\n            setButton('Hide Text!');\n            setPlay(false);\n            setScript(false);\n        }\n    },[path]);\n\n    function minimize(){\n        if (hide) {\n            setHide(false);\n            setButton('Hide Text!');\n        }else{\n            setHide(true);\n            setPlay(true);\n            setButton('Back');\n        }\n    }\n\n    function run(){\n        /*\n            Is not doing anything special. Due to a browser bug the user must\n            click somewhere to start the video.\n         */\n        setPlay(true);\n        setVisible(false);\n    }\n\n    function getScript(){\n        // setScript(true);\n        navigate('/ps1');\n    }\n\n    function copyLink(){\n        copyTextToClipBoard(host + '/ps1').then(()=>window.alert(\"Link copied! Now you can share to your friends :)\"));\n    }\n\n    useEffect(()=>{\n        if(visible) setTimeout(()=>{ setVisible(false)},10000);\n        else setTimeout(()=>{ setVisible(true)},500);\n        return () => clearTimeout();\n    },[visible]);\n\n    return(\n        <div className='always-on'>\n            {!play && !script && <button onClick={run} className='click-always-on'>Click to start!</button>}\n            {play && <button className='hide-text-always-on' onClick={minimize}>{button}</button>}\n            {!hide && play &&\n                <>\n                    <p>Keep this page open to keep the display always on</p>\n                    <p>If the world turn your device will not fall asleep</p>\n                </>\n            }\n            {visible && play &&\n                <div className={!hide ? 'player-wrapper-always-on': 'player-wrapper-always-on-small'}>\n                    <ReactPlayer\n                        className='react-player-always-on'\n                        url='https://fourlenses.com/wp-content/uploads/2022/01/file_example_MP4_480_1_5MG.mp4?_=1'\n                        width='100%'\n                        height='100%'\n                        playing={true}\n                        loop={true}\n                        controls={false}\n                        pip={false}\n                    />\n                </div>\n            }\n            {!visible && play &&\n                <div className='alwayson-emoti'>\n                    <p>{getRandEmoticons()}</p>\n                </div>\n            }\n            {play && !hide &&\n                <div>\n                    <p>Not working? <a href={() => false} className='script-link' onClick={()=>getScript()}>Try this solution</a></p>\n                </div>\n            }\n            {script &&\n                <div className='always-on-code-part'>\n                    <p><img\n                        className='powershell-ico'\n                        src='https://gist.githubusercontent.com/Xainey/d5bde7d01dcbac51ac951810e94313aa/raw/6c858c46726541b48ddaaebab29c41c07a196394/PowerShell.svg'\n                        alt=\"PowerShell Logo\"\n                    /> Windows 7 - 11 solution\n                    </p>\n                    <p>Copy the script in a text file and save as .ps1 then execute it from Powershell</p>\n                    <Ps1Code/>\n                    <p>Send to your friend <a href={() => false} className='script-link' onClick={()=>copyLink()}>mancioman.fun/ps1</a></p>\n                    <ButtonTemplate\n                        key={backButton.id}\n                        id={backButton.id}\n                        width={backButton.width}\n                        height={backButton.height}\n                        svgColor={backButton.svgColor}\n                        textColor={backButton.textColor}\n                        textField={backButton.textField}\n                        icon={backButton.icon}\n                        iconColor={backButton.iconColor}\n                        tag='menu'\n                    />\n                </div>\n            }\n        </div>\n    )\n}","export const replaceHtmlCharacters = function (string){\n    return string.replace(/&#(\\d+);/g, function(match, dec) {\n        return String.fromCharCode(dec);\n    })\n        .replace(/&quot;/g, '')\n        .replace(/&eacute;/g, 'é')\n        .replace(/&amp;/g, '\"')\n        .replace(/&ldquo;/g, '\"')\n        .replace(/&rdquo;/g, '\"')\n        .replace(/&shy;/g, '-');\n}\n\nexport const uriToYouTube = function (string){\n    return encodeURI(string).replace(/&/gi,'%26');\n}\n\nexport const newLine = function (){\n    return \"\\n\";\n}\n\nexport const tab = function (){\n    return \"\\t\";\n}\n\nexport const copyTextToClipBoard = function (text){\n    return navigator.clipboard.writeText(text);\n}\n\nexport const saveToTextFile = function (text, filename){\n    const element = document.createElement('a');\n    const file = new Blob([text], {\n        type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n    document.body.removeChild(element);\n}"],"sourceRoot":""}