{"version":3,"sources":["rotate/RotateDisplay.js","logic/DisplayCheck.js","tv/WatchTv.js","tv/ParsingHandler.js"],"names":["RotateDisplay","className","React","Component","isPortrait","console","log","window","screen","orientation","angle","isMobile","WatchTv","useState","display","setDisplay","back","getMenuItemByTag","tvList","setTvList","url","setUrl","tvName","setTvName","useEffect","getParsedTvList","handleResize","addEventListener","removeEventListener","id","map","el","currentId","name","onClick","addStoHttp","getTvUrlByIndex","changeUrl","width","height","controls","playing","config","file","attributes","crossOrigin","ButtonTemplate","svgColor","textColor","textField","icon","iconColor","tag","fileReader","getTextFromLink","link","a","fetch","res","text","undefined","body","setParsedTvList","playlist","jsonTvListItemsAsString","JSON","stringify","parser","parse","items","localStorage","setItem","handleFileRead","result","parsedList","jsonTvList","setParsedFileTvList","FileReader","readAsText","onloadend","list","getItem","indexOf","substring"],"mappings":"qUAGMA,E,4JACF,WACI,OACI,qBAAKC,UAAU,iBAAf,SACI,4D,GAJYC,IAAMC,WAUnBH,I,QCFFI,EAAa,WAEtB,OADAC,QAAQC,IAAIC,OAAOC,OAAOC,YAAYC,OACK,IAApCH,OAAOC,OAAOC,YAAYC,OAAeC,YCHrC,SAASC,IAEpB,MAA8BC,mBAAST,KAAvC,mBAAOU,EAAP,KAAgBC,EAAhB,KACMC,EAAOC,YAAiB,QAC9B,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAqBN,mBAAS,IAA9B,mBAAOO,EAAP,KAAWC,EAAX,KACA,EAA4BR,mBAAS,IAArC,mBAAOS,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACNL,EAAUM,iBACZ,IAEFD,qBAAU,WACN,SAASE,IACLX,EAAWX,KAIf,OADAG,OAAOoB,iBAAiB,SAAUD,GAC3B,kBAAMnB,OAAOqB,oBAAoB,SAAUF,MAEnD,IAEH,IAAIG,GAAM,EASV,OAAGf,EAAgB,cAAC,EAAD,IAGf,sBAAKb,UAAU,gBAAf,UACI,qBAAKA,UAAU,UAAf,SACI,iKAKJ,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,eAAf,SACI,gCACI,gCACKiB,EAAOY,KAAI,SAAAC,GAER,IAAMC,IADNH,EAEMP,EAASS,EAAGE,KAClB,OACI,oBAAIJ,GAAIG,EAAR,SACI,6BACI,wBAAQ/B,UAAU,iBAAiBiC,QAAS,kBA5BpF,SAAmBL,EAAII,GACnBZ,EAAOc,YAAWC,YAAgBP,KAClCN,EAAUU,GA0B4EI,CAAUL,EAAWV,IAAvE,SACI,4BAAIA,SAHQU,YAY5C,sBAAK/B,UAAU,iBAAf,UACI,cAAC,IAAD,CACImB,IAAOA,EACPkB,MAAQ,OACRC,OAAS,OACTC,UAAY,EACZC,SAAW,EACXC,OAAQ,CAAEC,KAAM,CACRC,WAAY,CACRC,YAAa,YAG7B,4BAAIvB,UAGZ,cAACwB,EAAA,EAAD,CAEIjB,GAAIb,EAAKa,GACTS,MAAOtB,EAAKsB,MACZC,OAAQvB,EAAKuB,OACbQ,SAAU/B,EAAK+B,SACfC,UAAWhC,EAAKgC,UAChBC,UAAWjC,EAAKiC,UAChBC,KAAMlC,EAAKkC,KACXC,UAAWnC,EAAKmC,UAChBC,IAAI,MATCpC,EAAKa,S,8MCxEtBwB,E,0CAdSC,EAAe,uCAAG,WAAgBC,GAAhB,iBAAAC,EAAA,sEACTC,MAAMF,GADG,cACrBG,EADqB,gBAERA,EAAIC,OAFI,eAGfC,KADNC,EAFqB,iDAGGA,GAHH,gCAIpB,SAJoB,2CAAH,sDAQfC,EAAe,uCAAG,WAAgBP,GAAhB,iBAAAC,EAAA,sEACJF,EAAgBC,GADZ,OACrBQ,EADqB,OAErBC,EAA0BC,KAAKC,UAAUC,IAAOC,MAAML,GAAUM,OACtEC,aAAaC,QAAQ,cAAcP,GAHR,2CAAH,sDAQtBQ,EAAiB,WACnB,IAAMT,EAAWV,EAAWoB,OACtBC,EAAaP,IAAOC,MAAML,GAAUM,MAC1ChE,QAAQC,IAAIoE,GACZ,IAAMC,EAAaV,KAAKC,UAAUQ,GAClCJ,aAAaC,QAAQ,cAAeI,IAG3BC,EAAmB,uCAAG,WAAgBjC,GAAhB,SAAAa,EAAA,uDAC/BH,EAAa,IAAIwB,YACNC,WAAWnC,GACtBU,EAAW0B,UAAYP,EAHQ,2CAAH,sDAMnB/C,EAAkB,WAC3B,IAAMuD,EAAOf,KAAKG,MAAME,aAAaW,QAAQ,gBAE7C,OADA5E,QAAQC,IAAI0E,GACLA,GAGE5C,EAAkB,SAAUP,GAErC,OADaoC,KAAKG,MAAME,aAAaW,QAAQ,gBACjCpD,GAAIT,KAGPe,EAAa,SAAUf,GAChC,OAAgC,IAA5BA,EAAI8D,QAAQ,YACL9D,EAEA,QAAUA,EAAI+D,UAAU","file":"static/js/19.9999ba4c.chunk.js","sourcesContent":["import React from \"react\";\nimport './RotateDisplay.css';\n\nclass RotateDisplay extends React.Component{\n    render() {\n        return (\n            <div className='rotate-display'>\n                <p>Please rotate display</p>\n            </div>\n        );\n    }\n}\n\nexport default RotateDisplay;","import {isMobile} from \"react-device-detect\";\n\nexport const isSmall = function (){\n    return window.screen.width < 400;\n}\n\nexport const isLandscape = function (){\n    console.log(window.screen.orientation.angle);\n    return window.screen.orientation.angle === 90 && isMobile;\n}\n\nexport const isPortrait = function (){\n    console.log(window.screen.orientation.angle);\n    return window.screen.orientation.angle === 0 && isMobile;\n}","import ButtonTemplate from \"../menu/ButtonTemplate\";\nimport {getMenuItemByTag} from \"../menu/MenuHandler\";\nimport {addStoHttp, getParsedTvList, getTvUrlByIndex} from \"./ParsingHandler\";\nimport {useEffect, useState} from \"react\";\nimport './WatchTv.css';\nimport ReactPlayer from 'react-player'\nimport RotateDisplay from \"../rotate/RotateDisplay\";\nimport {isPortrait} from \"../logic/DisplayCheck\";\n\n\nexport default function WatchTv(){\n\n    const [display, setDisplay] = useState(isPortrait());\n    const back = getMenuItemByTag('back');\n    const [tvList, setTvList] = useState([]);\n    const [url,setUrl] = useState('');\n    const [tvName, setTvName] = useState('');\n\n    useEffect(() => {\n        setTvList(getParsedTvList());\n    },[]);\n\n    useEffect(() => {\n        function handleResize() {\n            setDisplay(isPortrait());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n\n    }, []);\n\n    let id = -1;\n\n    function changeUrl(id, name){\n        setUrl(addStoHttp(getTvUrlByIndex(id)));\n        setTvName(name);\n    }\n\n\n\n    if(display) return <RotateDisplay/>;\n\n    return(\n        <div className='tv-watch-page'>\n            <div className='tv-note'>\n                <p>\n                    NOTE: Some tv channels can require VPN to be watched\n                    outside your country or a plug in called \"CORS\" installed in your browser\n                </p>\n            </div>\n            <div className='tv-frame'>\n                <div className='channel-list'>\n                    <table>\n                        <tbody>\n                            {tvList.map(el => {\n                                id++;\n                                const currentId = id;\n                                const tvName = el.name;\n                                return(\n                                    <tr id={currentId} key={currentId}>\n                                        <td>\n                                            <button className='tv-name-button' onClick={() => changeUrl(currentId, tvName)}>\n                                                <p>{tvName}</p>\n                                            </button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n                <div className='tv-video-frame'>\n                    <ReactPlayer\n                        url = {url}\n                        width = '100%'\n                        height = '100%'\n                        controls = {true}\n                        playing = {true}\n                        config={{ file: {\n                                attributes: {\n                                    crossOrigin: 'true'\n                                }}}}\n                    />\n                    <p>{tvName}</p>\n                </div>\n            </div>\n            <ButtonTemplate\n                key={back.id}\n                id={back.id}\n                width={back.width}\n                height={back.height}\n                svgColor={back.svgColor}\n                textColor={back.textColor}\n                textField={back.textField}\n                icon={back.icon}\n                iconColor={back.iconColor}\n                tag='tv'\n            />\n        </div>\n    )\n}\n\n","import parser from 'iptv-playlist-parser'\n\nexport const getTextFromLink = async function (link) {\n    const res = await fetch(link);\n    const body = await res.text();\n    if(body !== undefined) return body;\n    return 'error';\n\n}\n\nexport const setParsedTvList = async function (link) {\n    const playlist = await getTextFromLink(link);\n    const jsonTvListItemsAsString = JSON.stringify(parser.parse(playlist).items);\n    localStorage.setItem('tvListItems',jsonTvListItemsAsString);\n}\n\nlet fileReader;\n\nconst handleFileRead = function (){\n    const playlist = fileReader.result;\n    const parsedList = parser.parse(playlist).items;\n    console.log(parsedList);\n    const jsonTvList = JSON.stringify(parsedList);\n    localStorage.setItem('tvListItems', jsonTvList);\n}\n\nexport const setParsedFileTvList = async function (file){\n    fileReader = new FileReader();\n    fileReader.readAsText(file);\n    fileReader.onloadend = handleFileRead;\n}\n\nexport const getParsedTvList = function (){\n    const list = JSON.parse(localStorage.getItem('tvListItems'));\n    console.log(list);\n    return list;\n}\n\nexport const getTvUrlByIndex = function (id){\n    const list = JSON.parse(localStorage.getItem('tvListItems'));\n    return list[id].url;\n}\n\nexport const addStoHttp = function (url){\n    if (url.indexOf(\"https://\") === 0){\n        return url;\n    }else {\n        return \"https\" + url.substring(4);\n    }\n}"],"sourceRoot":""}